// Code generated by goa v3.7.12, DO NOT EDIT.
//
// sercret HTTP client CLI support package
//
// Command:
// $ goa gen secretsvc/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	secretc "secretsvc/gen/http/secret/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `secret (get-secret|create-secret)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` secret get-secret` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		secretFlags = flag.NewFlagSet("secret", flag.ContinueOnError)

		secretGetSecretFlags = flag.NewFlagSet("get-secret", flag.ExitOnError)

		secretCreateSecretFlags    = flag.NewFlagSet("create-secret", flag.ExitOnError)
		secretCreateSecretBodyFlag = secretCreateSecretFlags.String("body", "REQUIRED", "")
	)
	secretFlags.Usage = secretUsage
	secretGetSecretFlags.Usage = secretGetSecretUsage
	secretCreateSecretFlags.Usage = secretCreateSecretUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "secret":
			svcf = secretFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "secret":
			switch epn {
			case "get-secret":
				epf = secretGetSecretFlags

			case "create-secret":
				epf = secretCreateSecretFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "secret":
			c := secretc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-secret":
				endpoint = c.GetSecret()
				data = nil
			case "create-secret":
				endpoint = c.CreateSecret()
				data, err = secretc.BuildCreateSecretPayload(*secretCreateSecretBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// secretUsage displays the usage of the secret command and its subcommands.
func secretUsage() {
	fmt.Fprintf(os.Stderr, `The secret service can create delete or update Keptn secrets
Usage:
    %[1]s [globalflags] secret COMMAND [flags]

COMMAND:
    get-secret: GetSecret implements getSecret.
    create-secret: CreateSecret implements createSecret.

Additional help:
    %[1]s secret COMMAND --help
`, os.Args[0])
}
func secretGetSecretUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] secret get-secret

GetSecret implements getSecret.

Example:
    %[1]s secret get-secret
`, os.Args[0])
}

func secretCreateSecretUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] secret create-secret -body JSON

CreateSecret implements createSecret.
    -body JSON: 

Example:
    %[1]s secret create-secret --body '{
      "data": {
         "Blanditiis eos neque quod maiores enim vel.": "Quam ullam magni quis.",
         "Velit neque blanditiis repudiandae.": "Qui rerum omnis."
      },
      "name": "Dolorem necessitatibus.",
      "scope": "Maiores labore nulla molestiae harum at voluptatem."
   }'
`, os.Args[0])
}
