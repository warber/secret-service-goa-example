// Code generated by goa v3.7.12, DO NOT EDIT.
//
// secret HTTP client encoders and decoders
//
// Command:
// $ goa gen secretsvc/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	secret "secretsvc/gen/secret"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetSecretRequest instantiates a HTTP request object with method and
// path set to call the "secret" service "getSecret" endpoint
func (c *Client) BuildGetSecretRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSecretSecretPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("secret", "getSecret", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetSecretResponse returns a decoder for responses returned by the
// secret getSecret endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetSecretResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSecretResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secret", "getSecret", err)
			}
			res := NewGetSecretsResponseBodyOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("secret", "getSecret", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateSecretRequest instantiates a HTTP request object with method and
// path set to call the "secret" service "createSecret" endpoint
func (c *Client) BuildCreateSecretRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateSecretSecretPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("secret", "createSecret", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateSecretRequest returns an encoder for requests sent to the secret
// createSecret server.
func EncodeCreateSecretRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*secret.CreateSecretRequestBody)
		if !ok {
			return goahttp.ErrInvalidType("secret", "createSecret", "*secret.CreateSecretRequestBody", v)
		}
		body := NewCreateSecretRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("secret", "createSecret", err)
		}
		return nil
	}
}

// DecodeCreateSecretResponse returns a decoder for responses returned by the
// secret createSecret endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateSecretResponse may return the following errors:
//	- "secret_already_exists" (type *goa.ServiceError): http.StatusConflict
//	- error: internal error
func DecodeCreateSecretResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateSecretResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secret", "createSecret", err)
			}
			res := NewCreateSecretResponseBodyCreated(&body)
			return res, nil
		case http.StatusConflict:
			var (
				body CreateSecretSecretAlreadyExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secret", "createSecret", err)
			}
			err = ValidateCreateSecretSecretAlreadyExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("secret", "createSecret", err)
			}
			return nil, NewCreateSecretSecretAlreadyExists(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("secret", "createSecret", resp.StatusCode, string(body))
		}
	}
}

// unmarshalGetSecretResponseBodyResponseBodyToSecretGetSecretResponseBody
// builds a value of type *secret.GetSecretResponseBody from a value of type
// *GetSecretResponseBodyResponseBody.
func unmarshalGetSecretResponseBodyResponseBodyToSecretGetSecretResponseBody(v *GetSecretResponseBodyResponseBody) *secret.GetSecretResponseBody {
	if v == nil {
		return nil
	}
	res := &secret.GetSecretResponseBody{
		Name:  v.Name,
		Scope: v.Scope,
	}
	if v.Keys != nil {
		res.Keys = make([]string, len(v.Keys))
		for i, val := range v.Keys {
			res.Keys[i] = val
		}
	}

	return res
}
