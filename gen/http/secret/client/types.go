// Code generated by goa v3.7.12, DO NOT EDIT.
//
// secret HTTP client types
//
// Command:
// $ goa gen secretsvc/design

package client

import (
	secret "secretsvc/gen/secret"

	goa "goa.design/goa/v3/pkg"
)

// CreateSecretRequestBody is the type of the "secret" service "createSecret"
// endpoint HTTP request body.
type CreateSecretRequestBody struct {
	Data  map[string]string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Name  *string           `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Scope *string           `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// GetSecretResponseBody is the type of the "secret" service "getSecret"
// endpoint HTTP response body.
type GetSecretResponseBody struct {
	Secrets []*GetSecretResponseBodyResponseBody `form:"secrets,omitempty" json:"secrets,omitempty" xml:"secrets,omitempty"`
}

// CreateSecretResponseBody is the type of the "secret" service "createSecret"
// endpoint HTTP response body.
type CreateSecretResponseBody struct {
	Data  map[string]string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Name  *string           `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Scope *string           `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// CreateSecretSecretAlreadyExistsResponseBody is the type of the "secret"
// service "createSecret" endpoint HTTP response body for the
// "secret_already_exists" error.
type CreateSecretSecretAlreadyExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSecretResponseBodyResponseBody is used to define fields on response body
// types.
type GetSecretResponseBodyResponseBody struct {
	Keys  []string `form:"keys,omitempty" json:"keys,omitempty" xml:"keys,omitempty"`
	Name  *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Scope *string  `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// NewCreateSecretRequestBody builds the HTTP request body from the payload of
// the "createSecret" endpoint of the "secret" service.
func NewCreateSecretRequestBody(p *secret.CreateSecretRequestBody) *CreateSecretRequestBody {
	body := &CreateSecretRequestBody{
		Name:  p.Name,
		Scope: p.Scope,
	}
	if p.Data != nil {
		body.Data = make(map[string]string, len(p.Data))
		for key, val := range p.Data {
			tk := key
			tv := val
			body.Data[tk] = tv
		}
	}
	return body
}

// NewGetSecretsResponseBodyOK builds a "secret" service "getSecret" endpoint
// result from a HTTP "OK" response.
func NewGetSecretsResponseBodyOK(body *GetSecretResponseBody) *secret.GetSecretsResponseBody {
	v := &secret.GetSecretsResponseBody{}
	if body.Secrets != nil {
		v.Secrets = make([]*secret.GetSecretResponseBody, len(body.Secrets))
		for i, val := range body.Secrets {
			v.Secrets[i] = unmarshalGetSecretResponseBodyResponseBodyToSecretGetSecretResponseBody(val)
		}
	}

	return v
}

// NewCreateSecretResponseBodyCreated builds a "secret" service "createSecret"
// endpoint result from a HTTP "Created" response.
func NewCreateSecretResponseBodyCreated(body *CreateSecretResponseBody) *secret.CreateSecretResponseBody {
	v := &secret.CreateSecretResponseBody{
		Name:  body.Name,
		Scope: body.Scope,
	}
	if body.Data != nil {
		v.Data = make(map[string]string, len(body.Data))
		for key, val := range body.Data {
			tk := key
			tv := val
			v.Data[tk] = tv
		}
	}

	return v
}

// NewCreateSecretSecretAlreadyExists builds a secret service createSecret
// endpoint secret_already_exists error.
func NewCreateSecretSecretAlreadyExists(body *CreateSecretSecretAlreadyExistsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateSecretSecretAlreadyExistsResponseBody runs the validations
// defined on createSecret_secret_already_exists_response_body
func ValidateCreateSecretSecretAlreadyExistsResponseBody(body *CreateSecretSecretAlreadyExistsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
