// Code generated by goa v3.7.12, DO NOT EDIT.
//
// secret HTTP server encoders and decoders
//
// Command:
// $ goa gen secretsvc/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	secret "secretsvc/gen/secret"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetSecretResponse returns an encoder for responses returned by the
// secret getSecret endpoint.
func EncodeGetSecretResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*secret.GetSecretsResponseBody)
		enc := encoder(ctx, w)
		body := NewGetSecretResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeCreateSecretResponse returns an encoder for responses returned by the
// secret createSecret endpoint.
func EncodeCreateSecretResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*secret.CreateSecretResponseBody)
		enc := encoder(ctx, w)
		body := NewCreateSecretResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateSecretRequest returns a decoder for requests sent to the secret
// createSecret endpoint.
func DecodeCreateSecretRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateSecretRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewCreateSecretRequestBody(&body)

		return payload, nil
	}
}

// EncodeCreateSecretError returns an encoder for errors returned by the
// createSecret secret endpoint.
func EncodeCreateSecretError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "secret_already_exists":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateSecretSecretAlreadyExistsResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalSecretGetSecretResponseBodyToGetSecretResponseBodyResponseBody builds
// a value of type *GetSecretResponseBodyResponseBody from a value of type
// *secret.GetSecretResponseBody.
func marshalSecretGetSecretResponseBodyToGetSecretResponseBodyResponseBody(v *secret.GetSecretResponseBody) *GetSecretResponseBodyResponseBody {
	if v == nil {
		return nil
	}
	res := &GetSecretResponseBodyResponseBody{
		Name:  v.Name,
		Scope: v.Scope,
	}
	if v.Keys != nil {
		res.Keys = make([]string, len(v.Keys))
		for i, val := range v.Keys {
			res.Keys[i] = val
		}
	}

	return res
}
