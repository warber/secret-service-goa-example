// Code generated by goa v3.7.12, DO NOT EDIT.
//
// secret HTTP server types
//
// Command:
// $ goa gen secretsvc/design

package server

import (
	secret "secretsvc/gen/secret"

	goa "goa.design/goa/v3/pkg"
)

// CreateSecretRequestBody is the type of the "secret" service "createSecret"
// endpoint HTTP request body.
type CreateSecretRequestBody struct {
	Data  map[string]string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Name  *string           `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Scope *string           `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// GetSecretResponseBody is the type of the "secret" service "getSecret"
// endpoint HTTP response body.
type GetSecretResponseBody struct {
	Secrets []*GetSecretResponseBodyResponseBody `form:"secrets,omitempty" json:"secrets,omitempty" xml:"secrets,omitempty"`
}

// CreateSecretResponseBody is the type of the "secret" service "createSecret"
// endpoint HTTP response body.
type CreateSecretResponseBody struct {
	Data  map[string]string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Name  *string           `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Scope *string           `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// CreateSecretSecretAlreadyExistsResponseBody is the type of the "secret"
// service "createSecret" endpoint HTTP response body for the
// "secret_already_exists" error.
type CreateSecretSecretAlreadyExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSecretResponseBodyResponseBody is used to define fields on response body
// types.
type GetSecretResponseBodyResponseBody struct {
	Keys  []string `form:"keys,omitempty" json:"keys,omitempty" xml:"keys,omitempty"`
	Name  *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Scope *string  `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// NewGetSecretResponseBody builds the HTTP response body from the result of
// the "getSecret" endpoint of the "secret" service.
func NewGetSecretResponseBody(res *secret.GetSecretsResponseBody) *GetSecretResponseBody {
	body := &GetSecretResponseBody{}
	if res.Secrets != nil {
		body.Secrets = make([]*GetSecretResponseBodyResponseBody, len(res.Secrets))
		for i, val := range res.Secrets {
			body.Secrets[i] = marshalSecretGetSecretResponseBodyToGetSecretResponseBodyResponseBody(val)
		}
	}
	return body
}

// NewCreateSecretResponseBody builds the HTTP response body from the result of
// the "createSecret" endpoint of the "secret" service.
func NewCreateSecretResponseBody(res *secret.CreateSecretResponseBody) *CreateSecretResponseBody {
	body := &CreateSecretResponseBody{
		Name:  res.Name,
		Scope: res.Scope,
	}
	if res.Data != nil {
		body.Data = make(map[string]string, len(res.Data))
		for key, val := range res.Data {
			tk := key
			tv := val
			body.Data[tk] = tv
		}
	}
	return body
}

// NewCreateSecretSecretAlreadyExistsResponseBody builds the HTTP response body
// from the result of the "createSecret" endpoint of the "secret" service.
func NewCreateSecretSecretAlreadyExistsResponseBody(res *goa.ServiceError) *CreateSecretSecretAlreadyExistsResponseBody {
	body := &CreateSecretSecretAlreadyExistsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateSecretRequestBody builds a secret service createSecret endpoint
// payload.
func NewCreateSecretRequestBody(body *CreateSecretRequestBody) *secret.CreateSecretRequestBody {
	v := &secret.CreateSecretRequestBody{
		Name:  body.Name,
		Scope: body.Scope,
	}
	if body.Data != nil {
		v.Data = make(map[string]string, len(body.Data))
		for key, val := range body.Data {
			tk := key
			tv := val
			v.Data[tk] = tv
		}
	}

	return v
}
